/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanas;

import juegoCodigo.Baraja;
import juegoCodigo.Metodos;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import juegoCodigo.BarajaEspañola;
import juegoCodigo.Carta;

/**
 *
 * @author user
 */
public class Juego extends javax.swing.JFrame {

    private static int turnos = 1, comparativa1 = 0, comparativa2 = 0, comparativa3 = 0, x = 0;
    private static int[] puntajes = {20, 20, 20, 20};

    public Juego() {
        initComponents();
        jugadores mode = new jugadores();

        Baraja = new BarajaEspañola(true);
        Metodos.mostrarImagen(this.cartaIzquierda, TAPA);
        Metodos.mostrarImagen(this.cartaDerecha, TAPA);
        Metodos.mostrarImagen(this.cartaCentral, TAPA);

        if (mode.getJugadores() == 1) {
            modo.setText("Modo : Solitario");
            txtJugador.setText("Jugador Unico");
            txtScoresJugador1.setText("Jugador 1    [ " + puntajes[0] + " ]");
            scoreUsuario.setText(puntajes[0] + "");
        } else {
            modo.setText("Modo : Multijugador");
            txtJugador.setText("Jugador     1");
            switch (mode.getJugadores()) {
                case 2:
                    txtScoresJugador1.setText("Jugador 1    [ " + puntajes[0] + " ]");
                    txtScoresJugador2.setText("Jugador 2    [ " + puntajes[1] + " ]");
                    scoreUsuario.setText("20");
                    break;
                case 3:
                    txtScoresJugador1.setText("Jugador 1    [ " + puntajes[0] + " ]");
                    txtScoresJugador2.setText("Jugador 2    [ " + puntajes[1] + " ]");
                    txtScoresJugador3.setText("Jugador 3    [ " + puntajes[2] + " ]");
                    scoreUsuario.setText("20");
                    break;
                case 4:
                    txtScoresJugador1.setText("Jugador 1    [ " + puntajes[0] + " ]");
                    txtScoresJugador2.setText("Jugador 2    [ " + puntajes[1] + " ]");
                    txtScoresJugador3.setText("Jugador 3    [ " + puntajes[2] + " ]");
                    txtScoresJugador4.setText("Jugador 4    [ " + puntajes[3] + " ]");
                    scoreUsuario.setText("20");
                    break;
            }
        }

        this.setLocationRelativeTo(null);
        System.out.println(mode.getJugadores());
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("imagenes/cards.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textoUsuario = new javax.swing.JLabel();
        scoreUsuarioTexto = new javax.swing.JLabel();
        cartasDisponibles = new javax.swing.JTextField();
        cartasSacadas = new javax.swing.JTextField();
        scoreUsuario = new javax.swing.JTextField();
        repartir = new javax.swing.JButton();
        cartasDisponiblesTexto = new javax.swing.JLabel();
        cartasSacadasTexto = new javax.swing.JLabel();
        barajarDeNuevo = new javax.swing.JButton();
        dealer = new javax.swing.JLabel();
        txtJugador = new javax.swing.JLabel();
        siguienteJugador = new javax.swing.JButton();
        cartaCentral = new javax.swing.JLabel();
        modo = new javax.swing.JLabel();
        cartaIzquierda = new javax.swing.JLabel();
        cartaDerecha = new javax.swing.JLabel();
        txtScoreGeneral = new javax.swing.JLabel();
        btnRegresar = new javax.swing.JButton();
        apostarTodo = new javax.swing.JButton();
        apostar10 = new javax.swing.JButton();
        apostar5 = new javax.swing.JButton();
        btnRetirarse = new javax.swing.JButton();
        cartaMedioTexto = new javax.swing.JLabel();
        cartaFinalTexto = new javax.swing.JLabel();
        cartaInicioTexto = new javax.swing.JLabel();
        txtScoresJugador1 = new javax.swing.JLabel();
        txtScoresJugador2 = new javax.swing.JLabel();
        txtScoresJugador3 = new javax.swing.JLabel();
        txtScoresJugador4 = new javax.swing.JLabel();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        textoUsuario.setBackground(new java.awt.Color(255, 255, 255));
        textoUsuario.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        textoUsuario.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(textoUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, 530, 30));

        scoreUsuarioTexto.setBackground(new java.awt.Color(255, 255, 255));
        scoreUsuarioTexto.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        scoreUsuarioTexto.setForeground(new java.awt.Color(255, 255, 255));
        scoreUsuarioTexto.setText("Tu score:");
        getContentPane().add(scoreUsuarioTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, 90, 30));

        cartasDisponibles.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cartasDisponibles.setText("48");
        cartasDisponibles.setEnabled(false);
        cartasDisponibles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cartasDisponiblesActionPerformed(evt);
            }
        });
        getContentPane().add(cartasDisponibles, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 400, 100, -1));

        cartasSacadas.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cartasSacadas.setText("0");
        cartasSacadas.setEnabled(false);
        getContentPane().add(cartasSacadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 430, 100, -1));

        scoreUsuario.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        scoreUsuario.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        scoreUsuario.setText("0");
        scoreUsuario.setEnabled(false);
        scoreUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoreUsuarioActionPerformed(evt);
            }
        });
        getContentPane().add(scoreUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, 100, 30));

        repartir.setText("Repartir los extremos");
        repartir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repartirActionPerformed(evt);
            }
        });
        getContentPane().add(repartir, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 390, 210, 30));

        cartasDisponiblesTexto.setBackground(new java.awt.Color(255, 255, 255));
        cartasDisponiblesTexto.setForeground(new java.awt.Color(255, 255, 255));
        cartasDisponiblesTexto.setText("Cartas Disponibles");
        getContentPane().add(cartasDisponiblesTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 400, 120, -1));

        cartasSacadasTexto.setBackground(new java.awt.Color(255, 255, 255));
        cartasSacadasTexto.setForeground(new java.awt.Color(255, 255, 255));
        cartasSacadasTexto.setText("Cartas Sacadas");
        getContentPane().add(cartasSacadasTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 430, 90, -1));

        barajarDeNuevo.setText("Barajar");
        barajarDeNuevo.setEnabled(false);
        barajarDeNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barajarDeNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(barajarDeNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 425, 130, 30));

        dealer.setBackground(new java.awt.Color(255, 255, 255));
        dealer.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        dealer.setForeground(new java.awt.Color(255, 255, 255));
        dealer.setText("Dealer: Vamos a jugar como se debe!");
        getContentPane().add(dealer, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        txtJugador.setBackground(new java.awt.Color(255, 255, 255));
        txtJugador.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtJugador.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtJugador, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 10, 130, 30));

        siguienteJugador.setText("Siguiente Jugador");
        siguienteJugador.setEnabled(false);
        siguienteJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteJugadorActionPerformed(evt);
            }
        });
        getContentPane().add(siguienteJugador, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 430, 210, -1));
        getContentPane().add(cartaCentral, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 110, 100, 140));

        modo.setBackground(new java.awt.Color(255, 255, 255));
        modo.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(modo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 120, 20));
        getContentPane().add(cartaIzquierda, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, 100, 140));
        getContentPane().add(cartaDerecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 110, 100, 140));

        txtScoreGeneral.setBackground(new java.awt.Color(255, 255, 255));
        txtScoreGeneral.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtScoreGeneral.setForeground(new java.awt.Color(255, 255, 255));
        txtScoreGeneral.setText("Scores");
        getContentPane().add(txtScoreGeneral, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 70, 50, -1));

        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });
        getContentPane().add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 390, 130, 30));

        apostarTodo.setText("Apostar Todo");
        apostarTodo.setEnabled(false);
        apostarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apostarTodoActionPerformed(evt);
            }
        });
        getContentPane().add(apostarTodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 110, -1));

        apostar10.setText("Apostar 10");
        apostar10.setEnabled(false);
        apostar10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apostar10ActionPerformed(evt);
            }
        });
        getContentPane().add(apostar10, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, 90, -1));

        apostar5.setText("Apostar 5");
        apostar5.setEnabled(false);
        apostar5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apostar5ActionPerformed(evt);
            }
        });
        getContentPane().add(apostar5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, 90, -1));

        btnRetirarse.setText("Retirarse");
        btnRetirarse.setEnabled(false);
        btnRetirarse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetirarseActionPerformed(evt);
            }
        });
        getContentPane().add(btnRetirarse, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 390, 130, 60));

        cartaMedioTexto.setBackground(new java.awt.Color(255, 255, 255));
        cartaMedioTexto.setForeground(new java.awt.Color(255, 255, 255));
        cartaMedioTexto.setText("Carta central");
        getContentPane().add(cartaMedioTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 70, 70, 20));

        cartaFinalTexto.setBackground(new java.awt.Color(255, 255, 255));
        cartaFinalTexto.setForeground(new java.awt.Color(255, 255, 255));
        cartaFinalTexto.setText("Carta final");
        getContentPane().add(cartaFinalTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 70, 60, 20));

        cartaInicioTexto.setBackground(new java.awt.Color(255, 255, 255));
        cartaInicioTexto.setForeground(new java.awt.Color(255, 255, 255));
        cartaInicioTexto.setText("Carta inicio");
        getContentPane().add(cartaInicioTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 70, 20));

        txtScoresJugador1.setBackground(new java.awt.Color(255, 255, 255));
        txtScoresJugador1.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtScoresJugador1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 110, 120, 20));

        txtScoresJugador2.setBackground(new java.awt.Color(255, 255, 255));
        txtScoresJugador2.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtScoresJugador2, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 140, 120, 20));

        txtScoresJugador3.setBackground(new java.awt.Color(255, 255, 255));
        txtScoresJugador3.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtScoresJugador3, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 170, 120, 20));

        txtScoresJugador4.setBackground(new java.awt.Color(255, 255, 255));
        txtScoresJugador4.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtScoresJugador4, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 200, 120, 20));

        fondo.setIcon(new javax.swing.ImageIcon("C:\\Users\\user\\Documents\\NetBeansProjects\\InterfasesJava\\img\\Interfases\\fondo.jpg")); // NOI18N
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 880, 488));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void apostar5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apostar5ActionPerformed

        Carta c = Baraja.siguienteCarta();
        jugadores mode = new jugadores();

        if (apostar5.isEnabled()) {

            repartir.setEnabled(false);
            apostar5.setEnabled(false);
            apostar10.setEnabled(false);
            apostarTodo.setEnabled(false);
        }

        Metodos.mostrarImagen(this.cartaCentral, "img\\Interfases\\cartas\\" + c.getPalo().toString().toLowerCase() + "\\" + c.getNumero() + ".jpg");

        comparativa3 = c.getNumero();
        if ((comparativa3 > comparativa1 && comparativa3 < comparativa2) || (comparativa3 < comparativa1 && comparativa3 > comparativa2)) {
            puntajes[turnos - 1] += 10;
            scoreUsuario.setText((puntajes[turnos - 1]) + "");
        } else {
            puntajes[turnos - 1] -= 5;
            scoreUsuario.setText((puntajes[turnos - 1]) + "");
        }

        switch (turnos) {

            case 1:
                txtScoresJugador1.setText("Jugador 1    [ " + puntajes[0] + " ]");
                break;
            case 2:
                txtScoresJugador2.setText("Jugador 2    [ " + puntajes[1] + " ]");
                break;
            case 3:
                txtScoresJugador3.setText("Jugador 3    [ " + puntajes[2] + " ]");
                break;
            case 4:
                txtScoresJugador4.setText("Jugador 4    [ " + puntajes[3] + " ]");
                break;
        }

        if (mode.getJugadores() == 1) {
            if (puntajes[0] == 0) {
                JOptionPane.showMessageDialog(null, "Jugador " + turnos + ": llegaste a 0");
                siguienteJugador.setEnabled(false);
            } else {
                siguienteJugador.setEnabled(true);
            }
        } else if (puntajes[turnos - 1] == 0) {
            JOptionPane.showMessageDialog(null, "Jugador " + turnos + ": llegaste a 0");
            siguienteJugador.setEnabled(true);
        } else {
            siguienteJugador.setEnabled(true);
        }
        if (this.siguienteJugador.isEnabled()) {

            this.cartasDisponibles.setText(Baraja.cartasDisponibles() + "");
            this.cartasSacadas.setText((Baraja.getPosSiguienteCarta()) + "");
        }
    }//GEN-LAST:event_apostar5ActionPerformed

    private void apostarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apostarTodoActionPerformed

        Carta c = Baraja.siguienteCarta();
        jugadores mode = new jugadores();

        if (apostar5.isEnabled()) {

            repartir.setEnabled(false);
            apostar5.setEnabled(false);
            apostar10.setEnabled(false);
            apostarTodo.setEnabled(false);
        }

        Metodos.mostrarImagen(this.cartaCentral, "img\\Interfases\\cartas\\" + c.getPalo().toString().toLowerCase() + "\\" + c.getNumero() + ".jpg");

        comparativa3 = c.getNumero();
        if ((comparativa3 > comparativa1 && comparativa3 < comparativa2) || (comparativa3 < comparativa1 && comparativa3 > comparativa2)) {
            puntajes[turnos - 1] = puntajes[turnos] + (puntajes[turnos - 1] * 2);
            scoreUsuario.setText((puntajes[turnos - 1]) + "");
        } else {
            puntajes[turnos - 1] -= puntajes[turnos - 1];
            scoreUsuario.setText((puntajes[turnos - 1]) + "");
        }

        switch (turnos) {

            case 1:
                txtScoresJugador1.setText("Jugador 1    [ " + puntajes[0] + " ]");
                break;
            case 2:
                txtScoresJugador2.setText("Jugador 2    [ " + puntajes[1] + " ]");
                break;
            case 3:
                txtScoresJugador3.setText("Jugador 3    [ " + puntajes[2] + " ]");
                break;
            case 4:
                txtScoresJugador4.setText("Jugador 4    [ " + puntajes[3] + " ]");
                break;
        }
        if (mode.getJugadores() == 1) {
            if (puntajes[0] == 0) {
                JOptionPane.showMessageDialog(null, "Jugador " + turnos + ": llegaste a 0");
                siguienteJugador.setEnabled(false);
            } else {
                siguienteJugador.setEnabled(true);
            }
        } else if (puntajes[turnos - 1] == 0) {
            JOptionPane.showMessageDialog(null, "Jugador " + turnos + ": llegaste a 0");
            siguienteJugador.setEnabled(true);
        } else {
            siguienteJugador.setEnabled(true);
        }
        if (this.siguienteJugador.isEnabled()) {

            this.cartasDisponibles.setText(Baraja.cartasDisponibles() + "");
            this.cartasSacadas.setText((Baraja.getPosSiguienteCarta()) + "");
        }
    }//GEN-LAST:event_apostarTodoActionPerformed

    private void apostar10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apostar10ActionPerformed

        Carta c = Baraja.siguienteCarta();
        jugadores mode = new jugadores();

        if (apostar5.isEnabled()) {

            repartir.setEnabled(false);
            apostar5.setEnabled(false);
            apostar10.setEnabled(false);
            apostarTodo.setEnabled(false);
        }

        Metodos.mostrarImagen(this.cartaCentral, "img\\Interfases\\cartas\\" + c.getPalo().toString().toLowerCase() + "\\" + c.getNumero() + ".jpg");

        comparativa3 = c.getNumero();
        if ((comparativa3 > comparativa1 && comparativa3 < comparativa2) || (comparativa3 < comparativa1 && comparativa3 > comparativa2)) {
            puntajes[turnos - 1] += 20;
            scoreUsuario.setText((puntajes[turnos - 1]) + "");
        } else {
            puntajes[turnos - 1] -= 10;
            scoreUsuario.setText((puntajes[turnos - 1]) + "");
        }
        switch (turnos) {

            case 1:
                txtScoresJugador1.setText("Jugador 1    [ " + puntajes[0] + " ]");
                break;
            case 2:
                txtScoresJugador2.setText("Jugador 2    [ " + puntajes[1] + " ]");
                break;
            case 3:
                txtScoresJugador3.setText("Jugador 3    [ " + puntajes[2] + " ]");
                break;
            case 4:
                txtScoresJugador4.setText("Jugador 4    [ " + puntajes[3] + " ]");
                break;
        }
        if (mode.getJugadores() == 1) {
            if (puntajes[0] == 0) {
                JOptionPane.showMessageDialog(null, "Jugador " + turnos + ": llegaste a 0");
                siguienteJugador.setEnabled(false);
            } else {
                siguienteJugador.setEnabled(true);
            }
        } else if (puntajes[turnos - 1] == 0) {
            JOptionPane.showMessageDialog(null, "Jugador " + turnos + ": llegaste a 0");
            siguienteJugador.setEnabled(true);
        } else {
            siguienteJugador.setEnabled(true);
        }

        if (this.siguienteJugador.isEnabled()) {

            this.cartasDisponibles.setText(Baraja.cartasDisponibles() + "");
            this.cartasSacadas.setText((Baraja.getPosSiguienteCarta()) + "");
        }
    }//GEN-LAST:event_apostar10ActionPerformed

    private void repartirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repartirActionPerformed

        Carta c = Baraja.siguienteCarta();

        Metodos.mostrarImagen(this.cartaIzquierda, TAPA);
        Metodos.mostrarImagen(this.cartaDerecha, TAPA);

        if (repartir.isEnabled()) {

            repartir.setEnabled(false);
            apostar5.setEnabled(true);
            apostar10.setEnabled(true);
            apostarTodo.setEnabled(true);
            textoUsuario.setText("Elige sabiamente cuanto deseas apostar...PD: El que no arriesga, no gana.");
        }

        if (c != null) {

            comparativa1 = c.getNumero();
            Metodos.mostrarImagen(this.cartaIzquierda, "img\\Interfases\\cartas\\" + c.getPalo().toString().toLowerCase() + "\\" + c.getNumero() + ".jpg");

            c = Baraja.siguienteCarta();
            comparativa2 = c.getNumero();
            Metodos.mostrarImagen(this.cartaDerecha, "img\\Interfases\\cartas\\" + c.getPalo().toString().toLowerCase() + "\\" + c.getNumero() + ".jpg");

            this.cartasDisponibles.setText(Baraja.cartasDisponibles() + "");
            this.cartasSacadas.setText((Baraja.getPosSiguienteCarta()) + "");

            switch (turnos) {
                case 1:
                    scoreUsuario.setText(puntajes[0] + "");
                    break;
                case 2:
                    scoreUsuario.setText(puntajes[1] + "");
                    break;
                case 3:
                    scoreUsuario.setText(puntajes[2] + "");
                    break;
                case 4:
                    scoreUsuario.setText(puntajes[3] + "");
                    break;

            }

        } else {
            JOptionPane.showMessageDialog(this, "No hay mas cartas", "Error", JOptionPane.ERROR_MESSAGE);
            this.repartir.setEnabled(false);
            this.barajarDeNuevo.setEnabled(true);
            apostar5.setEnabled(false);
            apostar10.setEnabled(false);
            apostarTodo.setEnabled(false);
            Metodos.mostrarImagen(this.cartaIzquierda, TAPA);
            Metodos.mostrarImagen(this.cartaDerecha, TAPA);
            Metodos.mostrarImagen(this.cartaCentral, TAPA);

        }


    }//GEN-LAST:event_repartirActionPerformed

    private void cartasDisponiblesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cartasDisponiblesActionPerformed

        cartasDisponibles.setText(Baraja.cartasDisponibles() + "");

    }//GEN-LAST:event_cartasDisponiblesActionPerformed

    private void barajarDeNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barajarDeNuevoActionPerformed

        Baraja.barajar();
        this.barajarDeNuevo.setEnabled(false);
        apostar5.setEnabled(false);
        apostar10.setEnabled(false);
        apostarTodo.setEnabled(false);
        this.repartir.setEnabled(true);

        this.cartasDisponibles.setText("48");
        this.cartasSacadas.setText("0");


    }//GEN-LAST:event_barajarDeNuevoActionPerformed

    private void siguienteJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteJugadorActionPerformed

        ventanaFinal paso = new ventanaFinal();
        jugadores mode = new jugadores();
        if (siguienteJugador.isEnabled()) {
            repartir.setEnabled(true);
            siguienteJugador.setEnabled(false);

            if (mode.getJugadores() == 1) {
                txtJugador.setText("Jugador Unico");
                scoreUsuario.setText(puntajes[turnos] + "");
                if (puntajes[0] >= 50) {
                    JOptionPane.showMessageDialog(null, "Tienes " + puntajes[0] + " puntos, los necesarios para retirarte, que haras?");
                    btnRetirarse.setEnabled(true);
                } else if (puntajes[0] == 0) {
                    scoreUsuario.setText("0");
                    JOptionPane.showMessageDialog(null, "Tienes " + puntajes[0] + " puntos, has perdido");
                    btnRetirarse.setEnabled(false);
                    btnRegresar.setEnabled(true);
                    repartir.setEnabled(false);
                    siguienteJugador.setEnabled(false);
                    barajarDeNuevo.setEnabled(false);
                    apostar5.setEnabled(false);
                    apostar10.setEnabled(false);
                    apostarTodo.setEnabled(false);
                } else {
                    btnRetirarse.setEnabled(false);
                }

            } else {
                if (mode.getJugadores() == 2) {
                    switch (turnos) {
                        case 1:
                            if (puntajes[turnos - 1] >= 50) {
                                JOptionPane.showMessageDialog(null, "Tienes" + puntajes[turnos - 1] + " puntos, los necesarios para retirarte, que haras?");
                                btnRetirarse.setEnabled(true);
                            } else {
                                btnRetirarse.setEnabled(false);
                            }
                            turnos++;
                            txtJugador.setText("Jugador     " + turnos);
                            scoreUsuario.setText(puntajes[turnos - 1] + "");
                            break;
                        case 2:
                            if (puntajes[turnos - 1] >= 50) {
                                JOptionPane.showMessageDialog(null, "Tienes" + puntajes[turnos - 1] + " puntos, los necesarios para retirarte, que haras?");
                                btnRetirarse.setEnabled(true);
                            } else {
                                btnRetirarse.setEnabled(false);
                            }
                            turnos = 1;
                            txtJugador.setText("Jugador     " + turnos);
                            scoreUsuario.setText(puntajes[turnos - 1] + "");

                            break;
                    }
                } else {
                    if (mode.getJugadores() == 3) {
                        switch (turnos) {
                            case 1:
                                if (puntajes[turnos - 1] >= 50) {
                                    JOptionPane.showMessageDialog(null, "Tienes" + puntajes[turnos - 1] + " puntos, los necesarios para retirarte, que haras?");
                                    btnRetirarse.setEnabled(true);
                                    if (siguienteJugador.isSelected()) {
                                        btnRetirarse.setEnabled(false);
                                        turnos++;
                                        if (puntajes[turnos - 1] == 0) {
                                            turnos++;
                                        }
                                        if (puntajes[turnos - 1] == 0) {
                                            turnos = 1;
                                        }
                                        txtJugador.setText("Jugador     " + turnos);
                                        scoreUsuario.setText(puntajes[turnos - 1] + "");
                                    }
                                } else {
                                    btnRetirarse.setEnabled(false);
                                    turnos++;
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos++;
                                    }
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos = 1;
                                    }
                                    txtJugador.setText("Jugador     " + turnos);
                                    scoreUsuario.setText(puntajes[turnos - 1] + "");
                                }
                                break;
                            case 2:
                                if (puntajes[turnos - 1] >= 50) {
                                    JOptionPane.showMessageDialog(null, "Tienes" + puntajes[turnos - 1] + " puntos, los necesarios para retirarte, que haras?");
                                    btnRetirarse.setEnabled(true);
                                    if (siguienteJugador.isSelected()) {
                                        btnRetirarse.setEnabled(false);
                                        turnos++;
                                        if (puntajes[turnos - 1] == 0) {
                                            turnos = 1;
                                        }
                                        if (puntajes[turnos - 1] == 0) {
                                            turnos++;
                                        }

                                        txtJugador.setText("Jugador     " + turnos);
                                        scoreUsuario.setText(puntajes[turnos - 1] + "");
                                    }
                                } else {
                                    btnRetirarse.setEnabled(false);
                                    turnos++;
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos = 1;
                                    }
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos++;
                                    }

                                    txtJugador.setText("Jugador     " + turnos);
                                    scoreUsuario.setText(puntajes[turnos - 1] + "");
                                }

                                break;
                            case 3:
                                if (puntajes[turnos - 1] >= 50) {
                                    JOptionPane.showMessageDialog(null, "Tienes" + puntajes[turnos - 1] + " puntos, los necesarios para retirarte, que haras?");
                                    btnRetirarse.setEnabled(true);
                                    if (siguienteJugador.isSelected()) {
                                        btnRetirarse.setEnabled(false);
                                        turnos = 1;
                                        if (puntajes[turnos - 1] == 0) {
                                            turnos++;
                                        }
                                        if (puntajes[turnos - 1] == 0) {
                                            turnos++;
                                        }

                                        txtJugador.setText("Jugador     " + turnos);
                                        scoreUsuario.setText(puntajes[turnos - 1] + "");

                                    }
                                } else {
                                    btnRetirarse.setEnabled(false);
                                    turnos = 1;
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos++;
                                    }
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos++;
                                    }

                                    txtJugador.setText("Jugador     " + turnos);
                                    scoreUsuario.setText(puntajes[turnos - 1] + "");
                                }
                                break;
                        }
                    } else {
                        if (mode.getJugadores() == 4) {
                            switch (turnos) {
                                case 1:
                                    if (puntajes[turnos - 1] >= 50) {
                                        JOptionPane.showMessageDialog(null, "Tienes" + puntajes[turnos - 1] + " puntos, los necesarios para retirarte, que haras?");
                                        btnRetirarse.setEnabled(true);
                                    } else {
                                        btnRetirarse.setEnabled(false);
                                    }
                                    turnos++;
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos++;
                                    }
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos++;
                                    }
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos = 1;
                                    }

                                    txtJugador.setText("Jugador     " + turnos);
                                    scoreUsuario.setText(puntajes[turnos - 1] + "");

                                    break;
                                case 2:
                                    if (puntajes[turnos - 1] >= 50) {
                                        JOptionPane.showMessageDialog(null, "Tienes" + puntajes[turnos - 1] + " puntos, los necesarios para retirarte, que haras?");
                                        btnRetirarse.setEnabled(true);
                                    } else {
                                        btnRetirarse.setEnabled(false);
                                    }
                                    turnos++;
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos++;
                                    }
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos = 1;
                                    }
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos++;
                                    }
                                    txtJugador.setText("Jugador     " + turnos);
                                    scoreUsuario.setText(puntajes[turnos - 1] + "");

                                    break;
                                case 3:
                                    if (puntajes[turnos - 1] >= 50) {
                                        JOptionPane.showMessageDialog(null, "Tienes" + puntajes[turnos - 1] + " puntos, los necesarios para retirarte, que haras?");
                                        btnRetirarse.setEnabled(true);
                                    } else {
                                        btnRetirarse.setEnabled(false);
                                    }

                                    turnos++;
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos = 1;
                                    }
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos++;
                                    }
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos++;
                                    }
                                    txtJugador.setText("Jugador     " + turnos);
                                    scoreUsuario.setText(puntajes[turnos - 1] + "");

                                    break;
                                case 4:
                                    if (puntajes[turnos - 1] >= 50) {
                                        JOptionPane.showMessageDialog(null, "Tienes" + puntajes[turnos - 1] + " puntos, los necesarios para retirarte, que haras?");
                                        btnRetirarse.setEnabled(true);
                                    } else {
                                        btnRetirarse.setEnabled(false);
                                    }

                                    turnos = 1;
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos++;
                                    }
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos++;
                                    }
                                    if (puntajes[turnos - 1] == 0) {
                                        turnos++;
                                    }
                                    txtJugador.setText("Jugador     " + turnos);
                                    scoreUsuario.setText(puntajes[turnos - 1] + "");

                                    break;
                            }
                        }
                    }
                }
            }
            Metodos.mostrarImagen(this.cartaIzquierda, TAPA);
            Metodos.mostrarImagen(this.cartaDerecha, TAPA);
            Metodos.mostrarImagen(this.cartaCentral, TAPA);
        }

    }//GEN-LAST:event_siguienteJugadorActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed

        int resp = 0;
        jugadores paso = new jugadores();

        if (btnRegresar.isEnabled()) {
            resp = JOptionPane.showConfirmDialog(null, "Estas Seguro?", "ALERTA", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
            if (resp == 0) {
                paso.setVisible(true);
                this.setVisible(false);
            }
            for (int i = 0; i < puntajes.length; i++) {
                puntajes[i] = 20;
            }
        }
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void scoreUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoreUsuarioActionPerformed

    }//GEN-LAST:event_scoreUsuarioActionPerformed

    private void btnRetirarseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetirarseActionPerformed

        JOptionPane.showMessageDialog(null, "Te has retirado con: " + puntajes[turnos - 1] + " puntos");
        puntajes[turnos - 1] = 0;
        switch (turnos) {
            case 1:
                txtScoresJugador1.setText("Jugador 1    [ " + puntajes[turnos - 1] + " ]");
                repartir.setEnabled(false);
                break;
            case 2:
                txtScoresJugador2.setText("Jugador 2    [ " + puntajes[turnos - 1] + " ]");
                break;
            case 3:
                txtScoresJugador3.setText("Jugador 3    [ " + puntajes[turnos - 1] + " ]");
                break;
            case 4:
                txtScoresJugador4.setText("Jugador 4    [ " + puntajes[turnos - 1] + " ]");
                break;
        }
        btnRetirarse.setEnabled(false);
    }//GEN-LAST:event_btnRetirarseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Juego().setVisible(true);
            }
        });
    }

    private Baraja Baraja;
    private final String TAPA = "img\\Interfases\\tapa.jpg";


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apostar10;
    private javax.swing.JButton apostar5;
    private javax.swing.JButton apostarTodo;
    private javax.swing.JButton barajarDeNuevo;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnRetirarse;
    private javax.swing.JLabel cartaCentral;
    private javax.swing.JLabel cartaDerecha;
    private javax.swing.JLabel cartaFinalTexto;
    private javax.swing.JLabel cartaInicioTexto;
    private javax.swing.JLabel cartaIzquierda;
    private javax.swing.JLabel cartaMedioTexto;
    private javax.swing.JTextField cartasDisponibles;
    private javax.swing.JLabel cartasDisponiblesTexto;
    private javax.swing.JTextField cartasSacadas;
    private javax.swing.JLabel cartasSacadasTexto;
    private javax.swing.JLabel dealer;
    private javax.swing.JLabel fondo;
    private javax.swing.JLabel modo;
    private javax.swing.JButton repartir;
    private javax.swing.JTextField scoreUsuario;
    private javax.swing.JLabel scoreUsuarioTexto;
    private javax.swing.JButton siguienteJugador;
    private javax.swing.JLabel textoUsuario;
    private javax.swing.JLabel txtJugador;
    private javax.swing.JLabel txtScoreGeneral;
    private javax.swing.JLabel txtScoresJugador1;
    private javax.swing.JLabel txtScoresJugador2;
    private javax.swing.JLabel txtScoresJugador3;
    private javax.swing.JLabel txtScoresJugador4;
    // End of variables declaration//GEN-END:variables
}
